===============================
user guide to 100-matrix_mul.py
===============================

import unittest
from contextlib import redirect_stdout
from io import StringIO
import os
import sys

class TestMatrixMul(unittest.TestCase):

    def test_valid_matrix_multiplication(self):
        """
        Test valid matrix multiplication.
        """
        matrix_mul = __import__('100-matrix_mul').matrix_mul

        # Test case 1: 2x2 matrices
        m_a = [
            [1, 2],
            [3, 4]
        ]
        m_b = [
            [2, 0],
            [1, 2]
        ]
        result = matrix_mul(m_a, m_b)
        self.assertEqual(result, [[4, 4], [10, 8]])

        # Test case 2: 2x3 and 3x2 matrices
        m_a = [
            [1, 2, 3],
            [4, 5, 6]
        ]
        m_b = [
            [7, 8],
            [9, 10],
            [11, 12]
        ]
        result = matrix_mul(m_a, m_b)
        self.assertEqual(result, [[58, 64], [139, 154]])

    def test_invalid_matrix_multiplication(self):
        """
        Test invalid matrix multiplication.
        """
        matrix_mul = __import__('100-matrix_mul').matrix_mul

        # Test case 1: Invalid empty matrices
        m_a = []
        m_b = [[1, 2], [3, 4]]
        with self.assertRaises(ValueError) as context:
            matrix_mul(m_a, m_b)
        self.assertEqual(str(context.exception), "m_a can't be empty")

        # Test case 2: Matrices with incompatible dimensions
        m_a = [
            [1, 2],
            [3, 4]
        ]
        m_b = [
            [1, 2, 3],
            [4, 5, 6]
        ]
        with self.assertRaises(ValueError) as context:
            matrix_mul(m_a, m_b)
        self.assertEqual(str(context.exception), "m_a and m_b can't be multiplied")

    def test_invalid_matrix_types(self):
        """
        Test invalid matrix types.
        """
        matrix_mul = __import__('100-matrix_mul').matrix_mul

        # Test case 1: Non-list input
        m_a = "not a list"
        m_b = [[1, 2]]
        with self.assertRaises(ValueError) as context:
            matrix_mul(m_a, m_b)
        self.assertEqual(str(context.exception), "m_a must be a list or m_b must be a list")

        # Test case 2: Non-lists of lists
        m_a = [1, 2]
        m_b = [[3, 4]]
        with self.assertRaises(ValueError) as context:
            matrix_mul(m_a, m_b)
        self.assertEqual(str(context.exception), "m_a must be a list of lists or m_b must be a list of lists")

if __name__ == "__main__":
    unittest.main()
